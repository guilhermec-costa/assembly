     1                                  %include "defs.asm"
     1                              <1> ; CONSTANTS
     2                              <1> SYS_WRITE equ 4 ; sys_write
     3                              <1> SYS_READ equ 3 ; sys_read
     4                              <1> SYS_EXIT equ 1; sys_exit
     5                              <1> STDIN equ 0 ; fd = stdin
     6                              <1> SDOUT equ 1 ; fd = stdout
     7                              <1> 
     8                              <1> ; DEFINES
     9                              <1> %define syscall int 0x80 ; defined symbol
    10                              <1> 
    11                              <1> ; MACROS
    12                              <1> %macro PROLOGUE 0
    13                              <1>     ; this is super important, so at the end of the function it is possible to reset the stack frame to this point
    14                              <1>     ; this is called function prologue. Setup of the stack frame
    15                              <1>     push ebp
    16                              <1>     mov ebp, esp
    17                              <1> %endmacro
    18                              <1> 
    19                              <1> %macro EPILOGUE 0
    20                              <1>     ; this is called epilogue. Cleanup of the stack frame
    21                              <1>     mov esp, ebp
    22                              <1>     pop ebp
    23                              <1>     ret
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> 
     2                                  
     3                                  extern basic_input
     4                                  
     5                                  section .data 
     6                                      ; data segment, for initialized data
     7 00000000 14191E23                    positions db 20, 25, 30, 35 ; label positions
     8                                  
     9 00000004 456E74657220736F6D-         prompt db "Enter some text: ", 0
     9 0000000D 6520746578743A2000 
    10                                      prompt_len equ $ - prompt ;$ points to the current point at the data segment
    11                                  
    12                                  
    13                                  section .bss ; block start by symbols
    14                                  ; bss segment, for uninitialized data
    15 00000000 <res 20h>                   buffer resb 32
    16 00000020 ??                          bytes_read resb 1
    17                                  
    18                                  section .text 
    19                                  ; code segment. It is where the instruction are loaded in memory when the program starts
    20                                  
    21                                  global _start
    22                                  ; defines a global label. Gives external scope for the label. Allows other modules to access this label 
    23                                  ; labels are only nice names to reference the start of a memory location at ram 
    24                                  
    25                                  ; this main label points to the start of the instruction stored at ram
    26                                  _start:
    27 00000000 E8(00000000)                call basic_input
    28                                      
    29 00000005 A1[00000000]                mov eax, [positions] ; move 32 bits of data starting from the positions label
    30                                  
    31 0000000A B801000000                  mov eax, SYS_EXIT ; syscall 1 = exit
    32 0000000F BB01000000                  mov ebx, 1 
    33 00000014 CD80                        syscall ; a software interrupt. Uses eax value as the syscall
